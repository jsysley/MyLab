ufo <- read.delim(file = "/Users/jsysley/Documents/R/ML_for_Hackers-master/01-Introduction/data/ufo/ufo_awesome.tsv",sep="\t",stringsAsFactors = FALSE,header = FALSE,na.strings = "")
str(ufo)
head(ufo)
names(ufo) <- c("DateOccurred","DateReported","Location","ShortDescription","Duration","LongDescription")
View(ufo)
ufo$DateOccurred <- as.Date(ufo$DateOccurred,format = "%Y%m%d")
bad <- ufo[which(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported)!=8)]
bad <- ufo[which(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported)!=8)]
bad <- ufo[which(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported)!=8),]
length(bad)
nrow(bad)
head(bad)
bad <- ufo[which(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported)!=8),1]
nrow(bad)
head(bad)
bad <- ufo[which(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported)!=8),]
nrow(bad)
head(bad)
?ifelse
good.rows <- ifelse(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported)!=8,FALSE,TRUE)
length(which(!good.rows))#长度：FALSE的样本的数量
length(which(good.rows))#长度：FALSE的样本的数量
ufo.good <- ufo[good.rows,]
ufo.good$DateOccurred <- as.Date(ufo.good$DateOccurred,format="%Y%m%d")
ufo.good$DateReported <- as.Date(ufo.good$DateReported,format="%Y%m%d")
get.location <- function(l)
{
split.location <- tryCatch(strsplit(l,",")[[1]],error=function(e) return(c(NA,NA)))# 拿出第一个，由于是列表，1个字符串是一个列表
clean.location <- gsub("^ ","",split.location) #数据集split.location,把开头的空格取消掉
if(length(clean.location)>2)
{
return(c(NA,NA))
}#将有两个单词以上的，全部变为NA
else
{
return(clean.location)
}
}
city.state <- lapply(ufo.good$Location,get.location)#其数据是一个列表，每列是每个样本的拆分单词组成
head(city.state)
location.matrix <- do.call(rbind,city.state)
ufo.good <- transform(ufo.good,USCity=location.matrix[,1],USState=tolower(location.matrix[,2]),stringAsFactors=FALSE)
View((ufo.good))
ufo.good$USState <- us.states[match(ufo.good$USState,us.states)]
ufo.good$USCity[is.na(ufo.good$USState)] <- NA
us.states <- c("ak","al","ar","az","ca","co","ct","de","fl","ga","hi","ia","il","in","ks","ky","la","ma","md","me","mi","mn","mo","ms","mt","nc","nd","ne","nh","nj","nm","nv","ny","oh","ok","or","pa","ri","sc","sd","tn","tx","ut","va","vt","wa","wi","wv","wy")
ufo.good$USState <- us.states[match(ufo.good$USState,us.states)]
ufo.good$USCity[is.na(ufo.good$USState)] <- NA
ufo.us <- subset(ufo.good,!is.na(USState))
head(ufo.us)
summary(ufo.us$DateOccurred)
library(ggplot2)
install.packages("ggplot2")
quick.hist <- ggplot(ufo.us,aes(x=DateOccurred))+geom_histogram()#+scale_x_date(major="50 years")
ufo.us <- subset(ufo.us,DateOccurred>=as.Date("1990-01-01"))
nrow(ufo.us)
ufo.us$YearMonth <- strftime(ufo.us$DateOccurred,format = "%Y-%m")
sightings.counts <- ddply(ufo.us,.(USState,YearMonth),nrow)
date.range <- seq.Date(from=as.Date(min(ufo.us$DateOccurred)),to=as.Date(max(ufo.us$DateOccurred)),by="month")
library(plyr)
sightings.counts <- ddply(ufo.us,.(USState,YearMonth),nrow)
date.range <- seq.Date(from=as.Date(min(ufo.us$DateOccurred)),to=as.Date(max(ufo.us$DateOccurred)),by="month")
date.strings <- strftime(date.range,"%Y-%m")
head(states.dates)
head(states.dates)
states.dates <- lapply(us.states,function(s) cbind(s,date.strings))#返回列表，每个us.states一个列表
states.dates <- data.frame(do.call(rbind,states.dates),stringsAsFactors = FALSE)#每个列表的第一个元素拿出来形成1列，第二个元素形成第2列，以此类推。现在数据库包含了每一年，每个月，每个州的所有组合的所有目击记录。
all.sightings <- merge(states.dates,sightings.counts,by.x = c("s","date.strings"),by.y = c("USState","YearMonth"),all = TRUE)
head(all.sightings)
names(all.sightings) <- c("State","YearMonth","sightings")
head(data.range)
head(date.range)
length(us.states)
length(date.range)*length(us.states)
nrow(all.sightings)
all.sightings$sightings[is.na(all.sightings$sightings)] <- 0
all.sightings$YearMonth <- as.Date(rep(date.range,length(us.states)))
#简单来说是直接用新向量覆盖
all.sightings$State <- as.factor(toupper(all.sightings$State))
state.plot <- ggplot(all.sightings, aes(x = YearMonth,y = Sightings)) +
geom_line(aes(color = "darkblue")) +
facet_wrap(~State, nrow = 10, ncol = 5) +
theme_bw() +
scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +
scale_x_date(breaks = "5 years", labels = date_format('%Y')) +
xlab("Years") +
ylab("Number of Sightings") +
ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
library(ggplot2)
state.plot <- ggplot(all.sightings, aes(x = YearMonth,y = Sightings)) +
geom_line(aes(color = "darkblue")) +
facet_wrap(~State, nrow = 10, ncol = 5) +
theme_bw() +
scale_color_manual(values = c("darkblue" = "darkblue"), guide = "none") +
scale_x_date(breaks = "5 years", labels = date_format('%Y')) +
xlab("Years") +
ylab("Number of Sightings") +
ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
library(ggplot2)
state.plot <- ggplot(all.sightings, aes(x = YearMonth,y = Sightings)) +
geom_line(aes(color = "darkblue")) +
facet_wrap(~State, nrow = 10, ncol = 5) +
theme_bw() +
scale_color_manual(values = c("darkblue" = "darkblue"), legend=FALSE) +
scale_x_date(breaks = "10 years") +
xlab("Time")
ylab("Number of Sightings") +
ggtitle("Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
library(ggplot2)
state.plot <- ggplot(all.sightings, aes(x = YearMonth,y = Sightings)) +
geom_line(aes(color = "darkblue")) +
facet_wrap(~State, nrow = 10, ncol = 5) +
theme_bw() +
scale_color_manual(values = c("darkblue" = "darkblue"), legend=FALSE) +
scale_x_date(breaks = "10 years") +
xlab("Time")
ylab("Number of Sightings") +
opts(title="Number of UFO sightings by Month-Year and U.S. State (1990-2010)")
my.mean <- function(x)
{
return(sum(x) / length(x))
}
my.median <- function(x)
{
sorted.x <- sort(x)
if (length(x) %% 2 == 0)
{
indices <- c(length(x) / 2, length(x) / 2 + 1)
return(mean(sorted.x[indices]))
}
else
{
index <- ceiling(length(x) / 2)
return(sorted.x[index])
}
}
my.ve <- c(0,100)
mean(my.ve)
median(my.ve)
my.mean(my.ve)
my.median(my.ve)
library(ggplot2)
heights.weights <- read.csv(file='/Users/jsysley/Documents/R/ML_for_Hackers-master/02-Exploration/data/01_heights_weights_genders.csv',header=TRUE,sep=',')
dev.new()
heights.weights <- read.csv(file='/Users/jsysley/Documents/R/ML_for_Hackers-master/02-Exploration/data/01_heights_weights_genders.csv',header=TRUE,sep=',')
ggplot(heights.weights, aes(x = Height))# +geom_histogram(binwidth = 1)
ggplot(heights.weights, aes(x = Height)) +geom_histogram(binwidth = 1)
str(heights.weights)
citysales <- read.csv(file="/Users/jsysley/Desktop/R/R/01.数据分析R语言全套教程/01.数据分析之R语言初级篇/05.R语言进阶数据展现 14课/资料/Code/Chapter 5/Data Files/citysales.csv",header=TRUE)
barplot(as.matrix(citysales[,2:4]),beside=TRUE,legend.text = citysales$City,args.legend = list(bty="n",horiz=TRUE),col=brewer.pal(5,"Set1"),border="white",ylim=c(0,100),ylab="Sales Revenue(1000's of USD)",main="Sales Figures")
library(RColorBrewer)
barplot(as.matrix(citysales[,2:4]),beside=TRUE,legend.text = citysales$City,args.legend = list(bty="n",horiz=TRUE),col=brewer.pal(5,"Set1"),border="white",ylim=c(0,100),ylab="Sales Revenue(1000's of USD)",main="Sales Figures")
x <- barplot(as.matrix(citysales[,2:4]),beside = TRUE,legend.text = citysales$City,args.legend = list(bty="n",horiz=T,x=40,y=100),col=c("#E5562A","#491A5B","#8C6CA8","#BD1B8A"),border=FALSE,space=c(0,5),ylim=c(0,100),ylab="Sales Revenue(1000's of USD)",main="Sales Figures")
y <- as.matrix(citysales[,2:4])
text(x,y+2,labels = as.character(y))
text(x,y+,labels = as.character(y))
text(x,y,labels = as.character(y))
library(reshape)
citysales <- read.csv(file="/Users/jsysley/Desktop/R/R/01.数据分析R语言全套教程/01.数据分析之R语言初级篇/05.R语言进阶数据展现 14课/资料/Code/Chapter 5/Data Files/citysales.csv",header=TRUE)
View(citysales)
sales <- melt(citysales)
View(sales)
sales$color[sales[,2]=="ProductA"] <- "red"
sales$color[sales[,2]=="ProductB"] <- "blue"
sales$color[sales[,2]=="ProductC"] <- "violet"
dotchart(sales[,3],labels=sales$City,groups = sales[,2],col=sales$color,pch = 19,main="Sales Figures",xlab="Sales Revenue(1000's of USD)")
air<-read.csv(file="/Users/jsysley/Desktop/R/R/01.数据分析R语言全套教程/01.数据分析之R语言初级篇/05.R语言进阶数据展现 14课/资料/Code/Chapter 7/Data Files/airpollution.csv",header = TRUE)
boxplot(air,las=1)
boxplot(air,las=2)
metals<-read.csv(file="/Users/jsysley/Desktop/R/R/01.数据分析R语言全套教程/01.数据分析之R语言初级篇/05.R语言进阶数据展现 14课/资料/Code/Chapter 7/Data Files/metals.csv",header = TRUE)
View(metals)
boxplot(Cu~Source,data=metals,
main="Summary of Copper (Cu) concentrations by Site")
#varwidth:观测值多的箱子会宽，根据观测值数量调整
boxplot(Cu ~ Source, data = metals,
varwidth=TRUE,
main="Summary of Copper concentrations by Site")
install.packages("gplot")
install.packages("gplot")
sales <- read.csv(file="E:\\数据分析\\R\\R\\01.数据分析R语言全套教程\\01.数据分析之R语言初级篇\\05.R语言进阶数据展现 14课\\资料\\资料\\Code\\Chapter 8\\Data Files\\sales.csv",header=TRUE)
sales <- read.csv(file = "/Users/jsysley/Desktop/R/R/01.数据分析R语言全套教程/01.数据分析之R语言初级篇/05.R语言进阶数据展现 14课/资料/Code/Chapter 8/Data Files/sales.csv",header=TRUE)
View(sales)
breaks<-seq(3000,12000,1500)
breaks
nlm(function(x)return(x^2-sin(x)),8)
plot(x=seq(o,100,by=0.1),y=(x^2-sin(x)))
plot(x=seq(0,100,by=0.1),y=(x^2-sin(x)))
plot(x=seq(0,100,by=0.1),y=(x^2-sin(x)))
x=seq(0,100,by=0.1)
y=x^2-sin(x))
y=x^2-sin(x)
plot(x,y)
optim(function(x)return(-x^2+2*x-9))
optimize(function(x)return(-x^2+2*x-9))
optim(function(x)return(-x^2+2*x-9),8)
optim(function(x)return(-x^2+2*x-9),par = 1)
D(expression((expx^2),"x")
D(expression((expx^2),"x"))
D(expression((exp(x^2)),"x")
D(expression(exp(x^2)),"x")
integrate(function(x),x^2,0,1)
integrate(function(x)x^2,0,1)
diag(c(1,2,3))
m <- matrix(1:9,nrow = 3,byrow = TRUE)
m
sweep(m,1,c(1,4,7),"+")
combn(1:3,2)
print
print.lm
lm(1:9,2:10)
lm(1:9~2:10)
x=1:9
y=2:10
lm(y~x)
plot(lm)
print(lm)
print.lm
gg <- lm(y~x)
gg
unclass(gg)
methods(print)
lm
j <- list(name="Joe",salary=55000,union=T)
class(j)
class(j) <- "employee"
attributes(j)
j
list(name="Joe",salary=55000,union=T)
j#查看默认打印
print.employee <- function(wrkr)
{
cat(wrkr$name,"\n")
cat("salary",wrkr$salary,"\n")
cat("union member",wrkr$union,"\n")
}
methods(,"employee")
j
methods("employee")
methods(,"employee")
j
print(j)
k <- list(name="Kate",salary=68000,union=F,hrsthismonth=2)
class(k) <- c("hrlyemployee","employee")#新类和类原有的类
k
class(k)
ployreg
(a=2)
setClass("employee",
representation(
name="character",
salary="numeric",
union="logical")
)
employee
"employee"
Joe <- new("employ",name="Joe",salary=55000,union=T)
Joe <- new("employee",name="Joe",salary=55000,union=T)
Joe
Joe@salary
slot(Joe,"salary")
Joe
show(Joe)
setMethod("show","employee",
function(object)
{
inorout <- ifelse(object@union,"is","is not")
cat(object@name,"has a salary of",object@salary,
"and",inorout,"in the union","\n")
})
Joe
ls()
ls(pattern = "p")#列出所有名称中含有字符串"p"的对象
browseEnv()
dir()
gg <- "/Users/jsysley/Documents/git/MyLab"
sumtree <- function(drtr)
{
tot <- 0
fls <- dir(drtr,recursive = TRUE)
for(f in fls)
{
#f是否为目录
f <- file.path(drtr,f)
if(!file.info(f)$isdir)
{
tot <- tot+sum(scan(f,quiet = TRUE))
}
}
return(drtr)
}
drtr <- /Users/jsysley/Documents/git/MyLab
drtr <- "/Users/jsysley/Documents/git/MyLab"
tot <- 0
fls <- dir(drtr,recursive = TRUE)
fls
fls[1]
f<- fls[1]
f <- file.path(drtr,f)
f<- fls[1]
file.path(drtr,f)
file.path(f)
file.path(drtr)
file.path("abc")
file.path("abc","ad")
file.info(f)
scan(f)
f <- file.path(drtr,f)#以路径的形式拼接字符串
scan(f)
sumtree(drtr)
i=8
s <- sprintf("the square of %d is %d",i,i^2)
s
substr("Equator",3,5)
substring("Equator",3,5)
regexpr("uat","Equator")
regexpr("uat","Equator")
gregexpr("isis","Mississippi")
gregexpr("iss","Mississippi")
